<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="List_Person_Test" Id="{f9270774-45f6-4a3c-bd99-dc3e4865897e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK List_Person_Test EXTENDS TcUnit.FB_TestSuite
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AddItem();
AddRange();
Clear();
Contains();
Exists();
Find();
FindAll();
FindIndex();
FindLast();
FindLastIndex();
Foreach();
GetCapacity();
GetCount();
GetItem();
GetRange();
IndexOfItem();
LastIndexOfItem();
Initialize();
Insert();
InsertRange();
Remove();
RemoveAll();
RemoveAt();
RemoveRange();]]></ST>
    </Implementation>
    <Method Name="AddItem" Id="{11e2a459-7765-495e-a1ed-fa84a053e154}">
      <Declaration><![CDATA[METHOD AddItem
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    actualIndex1 : INT;
    actualIndex2 : INT;
    j : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('AddPersonShouldReturnAddedIndex');
//Assign
//Act
actualIndex1 := personsList.AddItem(personA);
actualIndex2 := personsList.AddItem(personB);
//Assert
AssertEquals_INT(0, actualIndex1,'check add 1');
AssertEquals_INT(1, actualIndex2,'check add 2');
TEST_FINISHED();

TEST('AddToAFullListShouldReturnMinusOne');
//Assign
personsList.Clear();
FOR j:=0 TO GVL.LIST_UPPER_BOUND DO
    personsList.AddItem(personA);
END_FOR
//Act
actualIndex1 := personsList.AddItem(personB);
//Assert
AssertEquals_INT(-1, actualIndex1,'check overflow add');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddRange" Id="{f5009314-9dd7-4cad-ac14-353c684e3b29}">
      <Declaration><![CDATA[METHOD AddRange
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    validArrayPtPerson : ARRAY[0..2] OF POINTER TO Person := [ADR(personE), ADR(personF), ADR(personG)];
    unvalidArrayPtPerson : ARRAY[0..6 + 1] OF POINTER TO Person;
    actualPtPerson3 : POINTER TO Person;
    actualPtPerson4 : POINTER TO Person;
    actualPtPerson5 : POINTER TO Person;
    actualPtPerson6 : POINTER TO Person;
    expected : INT := 6;
    actual : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');

TEST('AddRangeShouldPassAndReturnTheLastIndex');
//Assign
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
//Act
actual := personsList.AddRange(validArrayPtPerson);
actualPtPerson3 := personsList.GetItem(3);
actualPtPerson4 := personsList.GetItem(4);
actualPtPerson5 := personsList.GetItem(5);
actualPtPerson6 := personsList.GetItem(6);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(7, personsList.GetCount(),'check list count');
AssertTrue(actualPtPerson3^.Equals(personD),'check added element 3');
AssertTrue(actualPtPerson4^.Equals(personE),'check added element 4');
AssertTrue(actualPtPerson5^.Equals(personF),'check added element 5');
AssertTrue(actualPtPerson6^.Equals(personG),'check added element 6');
TEST_FINISHED();

TEST('AddRangeShouldFailAndReturnMinusOne');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
expected := -1;
//Act
actual := personsList.AddRange(unvalidArrayPtPerson);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(4, personsList.GetCount(),'check list count');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{9b3dfb6f-1f77-47b8-8a33-f0a2c6ffe4cf}">
      <Declaration><![CDATA[METHOD Clear
VAR
    personsList1 : List_Person_;
    personsList2 : List_Person_;
    person : Person;
    expectedCount : INT := 0;
    actualCount : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ClearAFilledListShouldPass');
//Assign
personsList1.AddItem(person);
//Act
personsList1.Clear();
actualCount := personsList1.GetCount();
//Assert
AssertEquals(expectedCount, actualCount,'');
TEST_FINISHED();

TEST('ClearAnEmptyListShouldPass');
//Assign
expectedCount := 0;
//Act
personsList2.Clear();
actualCount := personsList2.GetCount();
//Assert
AssertEquals(expectedCount, actualCount,'');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{bcc8c300-f0ae-4774-b872-f70bc7232e4b}">
      <Declaration><![CDATA[METHOD Contains
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    actual : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);

TEST('ContainsShouldReturnTrue');
//Assign
//Act
actual := personsList.Contains(personC);
//Assert
AssertTrue(actual,'Looking for personC');
TEST_FINISHED();

TEST('ContainsShouldReturnFalse');
//Assign
//Act
actual := personsList.Contains(personG);
//Assert
AssertFalse(actual,'Looking for personG');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Exists" Id="{2d5869da-5a98-40d2-baa2-7f0ec5c9ca2b}">
      <Declaration><![CDATA[METHOD Exists
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    predicate_Person_ : Predicate_Person_;
    actual : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);

TEST('ExistsShouldReturnTrue');
//Assign
//Act
actual := personsList.Exists(predicate_Person_, 2);
//Assert
AssertTrue(actual,'Looking for a person with name C');
TEST_FINISHED();

TEST('ExistsShouldReturnFalse');
//Assign
//Act
actual := personsList.Exists(predicate_Person_, 3);
//Assert
AssertFalse(actual,'Looking for a person with name G');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{88eff670-7867-4249-acd8-bd79171fc10a}">
      <Declaration><![CDATA[METHOD Find
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    predicate_Person_ : Predicate_Person_;
    actualPtPerson : POINTER TO Person;
    nullPtPerson : POINTER TO person := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);

TEST('FindShouldReturnAPerson');
//Assign
//Act
actualPtPerson := personsList.Find(predicate_Person_, 2);
//Assert
AssertTrue(actualPtPerson^.Equals(personC),'Get person with name C');
TEST_FINISHED();

TEST('FindShouldReturnZero');
//Assign
//Act
actualPtPerson := personsList.Find(predicate_Person_, 3);
//Assert
AssertEquals(nullPtPerson, actualPtPerson,'Get Zero when looking for person with name G');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindAll" Id="{7425f332-49f9-4c20-88f0-da5e69ea77ac}">
      <Declaration><![CDATA[METHOD FindAll
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    predicate_Person_ : Predicate_Person_;
    actualPersonsList : list_Person_;
    actualCount : INT;
    expectedCount : INT := 3;
    actualPtPerson0 : POINTER TO Person;
    actualPtPerson1 : POINTER TO Person;
    actualPtPerson2 : POINTER TO Person;
    nullPtPerson : POINTER TO Person := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);

TEST('FindAllShouldReturnAProperList');
//Assign
//Act
actualPersonsList := personsList.FindAll(predicate_Person_, 1); //Get people younger than 13
actualCount := actualPersonsList.GetCount();
actualPtPerson0 := actualPersonsList.GetItem(0);
actualPtPerson1 := actualPersonsList.GetItem(1);
actualPtPerson2 := actualPersonsList.GetItem(2);
//Assert
AssertEquals(expectedCount, actualCount, 'Check new list count');
AssertTrue(actualPtPerson0^.Equals(personA),'First element should personA');
AssertTrue(actualPtPerson1^.Equals(personB),'First element should personB');
AssertTrue(actualPtPerson2^.Equals(personC),'First element should personC');
TEST_FINISHED();

TEST('FindAllShouldReturnAnEmptyList');
//Assign
expectedCount := 0;
//Act
actualPersonsList := personsList.FindAll(predicate_Person_, 4); //Get people older than 50
actualCount := actualPersonsList.GetCount();
actualPtPerson0 := actualPersonsList.GetItem(0);
//Assert
AssertEquals(expectedCount, actualCount, 'Check new list count');
AssertEquals(nullPtPerson, actualPtPerson0, 'Check returned list element 0');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindIndex" Id="{4d72a505-eb57-4e55-8564-5f47ecafc6e4}">
      <Declaration><![CDATA[METHOD FindIndex
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    predicate_Person_ : Predicate_Person_;
    actualIndex : INT;
    expectedIndex : INT := 2;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);

TEST('FindIndexShouldReturnTheIndex');
//Assign
//Act
actualIndex := personsList.FindIndex(predicate_Person_, 2);
//Assert
AssertEquals(expectedIndex, actualIndex, 'find person with name C index');
TEST_FINISHED();

TEST('FindIndexShouldReturnMinusOne');
//Assign
expectedIndex := -1;
//Act
actualIndex := personsList.FindIndex(predicate_Person_, 3);
//Assert
AssertEquals(expectedIndex, actualIndex, 'Find person with name G index');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindLast" Id="{abbb3269-33fc-42ca-8bd9-9cbddf8b0564}">
      <Declaration><![CDATA[METHOD FindLast
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personC2 : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    predicate_Person_ : Predicate_Person_;
    actualPtPerson : POINTER TO Person;
    nullPtPerson : POINTER TO person := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personC2.SetAge(22);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personC2.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personC2); //Duplicated C
personsList.AddItem(personF);

TEST('FindLastShouldReturnAPerson');
//Assign
//Act
actualPtPerson := personsList.FindLast(predicate_Person_, 2);
//Assert
AssertFalse(actualPtPerson^.Equals(personC),'Not the last person with name C');
AssertTrue(actualPtPerson^.Equals(personC2),'Be the last person with name C');
TEST_FINISHED();

TEST('FindLastShouldReturnNull');
//Assign
//Act
actualPtPerson := personsList.Find(predicate_Person_, 3);
//Assert
AssertEquals(nullPtPerson, actualPtPerson,'Get Zero when looking for person with name G');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindLastIndex" Id="{2ce0d703-0d51-4a15-b8a5-468a2c4b2f32}">
      <Declaration><![CDATA[METHOD FindLastIndex
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personC2 : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    predicate_Person_ : Predicate_Person_;
    actualIndex : INT;
    expectedIndex : INT := 5;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personC.SetAge(22);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personC2.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personC2);
personsList.AddItem(personF);

TEST('FindLastIndexShouldReturnTheIndex');
//Assign
//Act
actualIndex := personsList.FindLastIndex(predicate_Person_, 2);
//Assert
AssertEquals(expectedIndex, actualIndex, 'Find last person with name C index');
TEST_FINISHED();

TEST('FindLastIndexShouldReturnMinusOne');
//Assign
expectedIndex := -1;
//Act
actualIndex := personsList.FindLastIndex(predicate_Person_, 3);
//Assert
AssertEquals(expectedIndex, actualIndex, 'Find person with name G index');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Foreach" Id="{c7149333-61bc-45db-a517-2be27202cf0d}">
      <Declaration><![CDATA[METHOD Foreach
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    action_Person_ : Action_Person_;
    actualPtPersonArray : ARRAY[0..3] OF POINTER TO Person;
    j : INT;
    expectedName : STRING := 'John';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ForeachShouldPass');
//Assign
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
//Act
personsList.Foreach(action_Person_, 2);
FOR j:=0 TO 3 DO
    actualPtPersonArray[j] := personsList.GetItem(j);
END_FOR
//Assert
AssertEquals_STRING(expectedName, actualPtPersonArray[0]^.GetName(),'element 0 shuold be named John');
AssertEquals_STRING(expectedName, actualPtPersonArray[1]^.GetName(),'element 0 shuold be named John');
AssertEquals_STRING(expectedName, actualPtPersonArray[2]^.GetName(),'element 0 shuold be named John');
AssertEquals_STRING(expectedName, actualPtPersonArray[3]^.GetName(),'element 0 shuold be named John');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCapacity" Id="{8ddaab13-7598-4afc-a5e5-0cd2f6d7be65}">
      <Declaration><![CDATA[METHOD GetCapacity
VAR
    personsList : List_Person_;
    person : Person;
    expectedCapacity : INT := GVL.LIST_UPPER_BOUND + 1;
    actualCapacity : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('GetCapacityShouldPass');
//Act
actualCapacity := personsList.GetCapacity();
//Assert
AssertEquals_INT(expectedCapacity, actualCapacity,'Get capacity at the begining');
TEST_FINISHED();

TEST('GetCapacityShouldPassWithSameValue');
//Assign
personsList.AddItem(person);
//Act
actualCapacity := personsList.GetCapacity();
//Assert
AssertEquals(expectedCapacity, actualCapacity,'Get capacity after adding a person');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCount" Id="{e9e9e69d-bbf9-467d-a81f-09763039079f}">
      <Declaration><![CDATA[METHOD GetCount
VAR
    personsList : List_Person_;
    person : Person;
    expectedCount : INT := 0;
    actualCount : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('GetCountShouldReturnZero');
//Act
actualCount := personsList.GetCount();
//Assert
AssertEquals_INT(expectedCount, actualCount,'Get count at the begining');
TEST_FINISHED();

TEST('GetCountShouldReturnOne');
//Assign
personsList.AddItem(person);
expectedCount := 1;
//Act
actualCount := personsList.GetCount();
//Assert
AssertEquals(expectedCount, actualCount,'Get count after adding a person');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetItem" Id="{25c92982-6de9-488f-9bc0-45793e501629}">
      <Declaration><![CDATA[METHOD GetItem
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    actualPtPerson : POINTER TO Person;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personA.SetName('A');
personB.SetName('B');
personsList.AddItem(personA);
personsList.AddItem(personB);

TEST('GetPersonShouldPass');
//Assign
//Act
actualPtPerson := personsList.GetItem(1);
//Assert
AssertEquals_INT(11, actualPtPerson^.GetAge(),'check age');
AssertTrue(actualPtPerson^.Equals(personB),'check Equality');
TEST_FINISHED();

TEST('GetShouldBeByReference');
//Assign
//Act
actualPtPerson := personsList.GetItem(1);
personB.SetAge(20);
actualPtPerson^.GetAge();
//Assert
AssertEquals_INT(20, actualPtPerson^.GetAge(),'');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetRange" Id="{55525038-1c47-483e-bcd1-310e0b7b30ea}">
      <Declaration><![CDATA[METHOD GetRange
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    actualPersonsList : list_Person_;
    actualCount : INT;
    expectedCount : INT := 3;
    actualPtPerson0 : POINTER TO Person;
    actualPtPerson1 : POINTER TO Person;
    actualPtPerson2 : POINTER TO Person;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);

TEST('GetRangeShouldReturnList');
//Assign
//Act
actualPersonsList := personsList.GetRange(1, expectedCount);
actualCount := actualPersonsList.GetCount();
actualPtPerson0 := actualPersonsList.GetItem(0);
actualPtPerson1 := actualPersonsList.GetItem(1);
actualPtPerson2 := actualPersonsList.GetItem(2);
//Assert
AssertEquals(expectedCount, actualCount, 'Check new list count');
AssertTrue(actualPtPerson0^.Equals(personB),'First element should personB');
AssertTrue(actualPtPerson1^.Equals(personC),'First element should personC');
AssertTrue(actualPtPerson2^.Equals(personD),'First element should personD');
TEST_FINISHED();

TEST('GetRangeShouldReturnListTillLastElement');
//Assign
//Act
actualPersonsList := personsList.GetRange(1, 1000);
actualCount := actualPersonsList.GetCount();
//Assert
expectedCount := 5;
AssertEquals(expectedCount, actualCount, 'Check new list count for GetRange 1000');
TEST_FINISHED();

TEST('GetRangeShouldReturnEmptyList');
//Assign
//Act
actualPersonsList := personsList.GetRange(-5, 1);
actualCount := actualPersonsList.GetCount();
//Assert
expectedCount := 0;
AssertEquals(expectedCount, actualCount, 'Check new list count for GetRange starting -5');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="IndexOfItem" Id="{2b9558a7-6ede-4f14-ab62-6370229c5901}">
      <Declaration><![CDATA[METHOD IndexOfItem
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    actualIndex : INT;
    expectedIndex : INT := 3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);

TEST('IndexOfItemShouldReturnTheIndex');
//Assign
//Act
actualIndex := personsList.IndexOfItem(personD);
//Assert
AssertEquals(expectedIndex, actualIndex, 'return the index of personD');
TEST_FINISHED();

TEST('IndexOfItemShouldReturnMinusOne');
//Assign
//Act
actualIndex := personsList.IndexOfItem(personG);
//Assert
expectedIndex := -1;
AssertEquals(expectedIndex, actualIndex, 'return the index of personG');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{6946ce10-88c8-4daa-b1a2-e3b32700cff8}">
      <Declaration><![CDATA[METHOD Initialize
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    validArrayPtPerson : ARRAY[0..2] OF POINTER TO Person := [ADR(personA), ADR(personB), ADR(personC)];
    unvalidArrayPtPerson : ARRAY[0..GVL.LIST_UPPER_BOUND + 1] OF POINTER TO Person;
    actualPtPerson0 : POINTER TO Person;
    actualPtPerson1 : POINTER TO Person;
    actualPtPerson2 : POINTER TO Person;
    expected : INT := 2;
    actual : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');

TEST('InitializeShouldPassAndReturnTheLastIndex');
//Assign
//Act
actual := personsList.Initialize(validArrayPtPerson);
actualPtPerson0 := personsList.GetItem(0);
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(3, personsList.GetCount(),'check list count');
AssertTrue(actualPtPerson0^.Equals(personA),'check added element 0');
AssertTrue(actualPtPerson1^.Equals(personB),'check added element 1');
AssertTrue(actualPtPerson2^.Equals(personC),'check added element 2');
TEST_FINISHED();

TEST('InitializeShouldFailAndReturnMinusOne');
//Assign
personsList.Clear();
expected := -1;
//Act
actual := personsList.Initialize(unvalidArrayPtPerson);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(0, personsList.GetCount(),'check list count');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{d34c4093-ecfa-4630-8bce-fdd1288ae68f}">
      <Declaration><![CDATA[METHOD Insert
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    actualPtPerson1 : POINTER TO Person;
    actualPtPerson2 : POINTER TO Person;
    actualPtPerson3 : POINTER TO Person;
    expected : INT := 2;
    actual : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');

TEST('InsertShouldPassAndReturnTheLastIndex');
//Assign
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
//Act
actual := personsList.Insert(2, personD);
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
actualPtPerson3 := personsList.GetItem(3);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(4, personsList.GetCount(),'check list count');
AssertTrue(actualPtPerson1^.Equals(personB),'check added element 1');
AssertTrue(actualPtPerson2^.Equals(personD),'check added element 2');
AssertTrue(actualPtPerson3^.Equals(personC),'check added element 3');
TEST_FINISHED();

TEST('InsertShouldPassEvenByIndexHigherThanListCurrentLastIndexAndReturnTheLastIndex');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
expected := 3;
//Act
actual := personsList.Insert(7, personD);
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
actualPtPerson3 := personsList.GetItem(3);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(4, personsList.GetCount(),'check list count');
AssertTrue(actualPtPerson1^.Equals(personB),'check added element 1');
AssertTrue(actualPtPerson2^.Equals(personC),'check added element 2');
AssertTrue(actualPtPerson3^.Equals(personD),'check added element 3');
TEST_FINISHED();

TEST('InsertShouldPassEvenByIndexHigherThanListUpperBoundAndReturnTheLastIndex');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
expected := 3;
//Act
actual := personsList.Insert(GVL.LIST_UPPER_BOUND + 1, personD);
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
actualPtPerson3 := personsList.GetItem(3);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(4, personsList.GetCount(),'check list count');
AssertTrue(actualPtPerson1^.Equals(personB),'check added element 1');
AssertTrue(actualPtPerson2^.Equals(personC),'check added element 2');
AssertTrue(actualPtPerson3^.Equals(personD),'check added element 3');
TEST_FINISHED();

TEST('InsertShouldFailByMinusIndexAndReturnMinusOne');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
expected := -1;
//Act
actual := personsList.Insert(-1, personD);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(3, personsList.GetCount(),'check list count');
TEST_FINISHED();


]]></ST>
      </Implementation>
    </Method>
    <Method Name="InsertRange" Id="{ba7936f5-6a73-451b-b349-674c7956273e}">
      <Declaration><![CDATA[METHOD InsertRange
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    validArrayPtPerson : ARRAY[0..2] OF POINTER TO Person := [ADR(personE), ADR(personF), ADR(personG)];
    unvalidArrayPtPerson : ARRAY[0..6 + 1] OF POINTER TO Person;
    actualPtPerson1 : POINTER TO Person;
    actualPtPerson2 : POINTER TO Person;
    actualPtPerson3 : POINTER TO Person;
    actualPtPerson4 : POINTER TO Person;
    actualPtPerson5 : POINTER TO Person;
    actualPtPerson6 : POINTER TO Person;
    actualPtPerson7 : POINTER TO Person;
    expected : INT := 4;
    actual : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');

TEST('InsertRangeShouldPassAndReturnTheLastIndex');
//Assign
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
//Act
actual := personsList.InsertRange(2, validArrayPtPerson);
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
actualPtPerson3 := personsList.GetItem(3);
actualPtPerson4 := personsList.GetItem(4);
actualPtPerson5 := personsList.GetItem(5);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(7, personsList.GetCount(),'check list count');
AssertTrue(actualPtPerson1^.Equals(personB),'check added element 1');
AssertTrue(actualPtPerson2^.Equals(personE),'check added element 2');
AssertTrue(actualPtPerson3^.Equals(personF),'check added element 3');
AssertTrue(actualPtPerson4^.Equals(personG),'check added element 4');
AssertTrue(actualPtPerson5^.Equals(personC),'check added element 5');
TEST_FINISHED();

TEST('InsertRangeShouldPassEvenByIndexHigherThanListCurrentLastIndexAndReturnTheLastIndex');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
expected := 6;
//Act
actual := personsList.InsertRange(7, validArrayPtPerson);
actualPtPerson3 := personsList.GetItem(3);
actualPtPerson4 := personsList.GetItem(4);
actualPtPerson5 := personsList.GetItem(5);
actualPtPerson6 := personsList.GetItem(6);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(7, personsList.GetCount(),'check list count');
AssertTrue(actualPtPerson3^.Equals(personD),'check added element 3');
AssertTrue(actualPtPerson4^.Equals(personE),'check added element 4');
AssertTrue(actualPtPerson5^.Equals(personF),'check added element 5');
AssertTrue(actualPtPerson6^.Equals(personG),'check added element 6');
TEST_FINISHED();

TEST('InsertRangeShouldPassEvenByIndexHigherThanListUpperBoundAndReturnTheLastIndex');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
expected := 6;
//Act
actual := personsList.InsertRange(7, validArrayPtPerson);
actualPtPerson3 := personsList.GetItem(3);
actualPtPerson4 := personsList.GetItem(4);
actualPtPerson5 := personsList.GetItem(5);
actualPtPerson6 := personsList.GetItem(6);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(7, personsList.GetCount(),'check list count');
AssertTrue(actualPtPerson3^.Equals(personD),'check added element 3');
AssertTrue(actualPtPerson4^.Equals(personE),'check added element 4');
AssertTrue(actualPtPerson5^.Equals(personF),'check added element 5');
AssertTrue(actualPtPerson6^.Equals(personG),'check added element 6');
TEST_FINISHED();

TEST('InsertRangeShouldFailByMinusIndexAndReturnMinusOne');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
expected := -1;
//Act
actual := personsList.InsertRange(-1, validArrayPtPerson);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(4, personsList.GetCount(),'check list count');
TEST_FINISHED();

TEST('InsertRangeShouldFailByLongArrayLengthAndReturnMinusOne');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
expected := -1;
//Act
actual := personsList.InsertRange(2, unvalidArrayPtPerson);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals_INT(4, personsList.GetCount(),'check list count');
TEST_FINISHED();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="LastIndexOfItem" Id="{eff48a9d-ea3d-4f2d-a75f-040f997150dd}">
      <Declaration><![CDATA[METHOD LastIndexOfItem
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    actualIndex : INT;
    expectedIndex : INT := 5;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personD);
personsList.AddItem(personF);

TEST('LastIndexOfItemShouldReturnTheIndex');
//Assign
//Act
actualIndex := personsList.LastIndexOfItem(personD);
//Assert
AssertEquals(expectedIndex, actualIndex, 'return the last index of personD');
TEST_FINISHED();

TEST('LastIndexOfItemShouldReturnMinusOne');
//Assign
//Act
actualIndex := personsList.LastIndexOfItem(personG);
//Assert
expectedIndex := -1;
AssertEquals(expectedIndex, actualIndex, 'return the last index of personG');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{b9673820-84f4-47e9-ba66-38a07758a735}">
      <Declaration><![CDATA[METHOD Remove
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    expectedCount : INT := 3;
    actualPtPerson1 : POINTER TO Person;
    actualPtPerson2 : POINTER TO Person;
    actualCount : INT;
    actual : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);

TEST('RemoveShouldPassAndReturnTrue');
//Assign
//Act
actual := personsList.Remove(personC);
actualCount := personsList.GetCount();
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
//Assert
AssertTrue(actual,'check result of remove');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPerson1^.Equals(personB),'check list element 1');
AssertTrue(actualPtPerson2^.Equals(personD),'check list element 2');
TEST_FINISHED();

TEST('RemoveShouldFailAndReturnFalse');
//Assign
//Act
actual := personsList.Remove(personC);
actualCount := personsList.GetCount();
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
//Assert
AssertFalse(actual,'check result of remove');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPerson1^.Equals(personB),'check list element 1');
AssertTrue(actualPtPerson2^.Equals(personD),'check list element 2');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAll" Id="{edf0f28e-ef7b-4ba4-96c2-13e482372799}">
      <Declaration><![CDATA[METHOD RemoveAll
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    predicate_Person_ : Predicate_Person_;
    actual : INT;
    expected : INT := 3;
    actualCount : INT;
    expectedCount : INT := 4;
    actualPtPerson0 : POINTER TO Person;
    actualPtPerson1 : POINTER TO Person;
    actualPtPerson2 : POINTER TO Person;
    actualPtPerson3 : POINTER TO Person;
    actualPtPerson4 : POINTER TO Person;
    actualPtPerson5 : POINTER TO Person;
    actualPtPerson6 : POINTER TO Person;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);

TEST('RemoveAllShouldReturnAProperList');
//Assign
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);
personsList.AddItem(personG);
//Act
actual := personsList.RemoveAll(predicate_Person_, 1); //Remove people younger than 13
actualCount := personsList.GetCount();
actualPtPerson0 := personsList.GetItem(0);
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
actualPtPerson3 := personsList.GetItem(3);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals(expectedCount, actualCount, 'check list count');
AssertTrue(actualPtPerson0^.Equals(personD),'check returned list element 0');
AssertTrue(actualPtPerson1^.Equals(personE),'check returned list element 1');
AssertTrue(actualPtPerson2^.Equals(personF),'check returned list element 2');
AssertTrue(actualPtPerson3^.Equals(personG),'check returned list element 3');
TEST_FINISHED();

TEST('RemoveAllShouldReturnTheOriginalListUntouched');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);
personsList.AddItem(personG);
expected := 0;
expectedCount := 7;
//Act
actual := personsList.RemoveAll(predicate_Person_, 4); //Remove people older than 50
actualCount := personsList.GetCount();
actualPtPerson0 := personsList.GetItem(0);
actualPtPerson1 := personsList.GetItem(1);
actualPtPerson2 := personsList.GetItem(2);
actualPtPerson3 := personsList.GetItem(3);
actualPtPerson4 := personsList.GetItem(4);
actualPtPerson5 := personsList.GetItem(5);
actualPtPerson6 := personsList.GetItem(6);
//Assert
AssertEquals(expected, actual, 'check result');
AssertEquals(expectedCount, actualCount, 'check list count');
AssertTrue(actualPtPerson0^.Equals(personA),'check returned list element 0');
AssertTrue(actualPtPerson1^.Equals(personB),'check returned list element 1');
AssertTrue(actualPtPerson2^.Equals(personC),'check returned list element 2');
AssertTrue(actualPtPerson3^.Equals(personD),'check returned list element 3');
AssertTrue(actualPtPerson4^.Equals(personE),'check returned list element 4');
AssertTrue(actualPtPerson5^.Equals(personF),'check returned list element 5');
AssertTrue(actualPtPerson6^.Equals(personG),'check returned list element 6');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{1d891a18-a23d-45c2-8d94-b094a5a2c29f}">
      <Declaration><![CDATA[METHOD RemoveAt
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    actualPtPersonArray : ARRAY[0..3] OF POINTER TO Person;
    expectedCount : INT := 3;
    actualCount : INT;
    actual : BOOL;
    j : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');

TEST('RemoveAtShouldPass');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
//Act
actual := personsList.RemoveAt(2);
actualCount := personsList.GetCount();
FOR j:=0 TO 3 DO
    actualPtPersonArray[j] := personsList.GetItem(j);
END_FOR
//Assert
AssertTrue(actual,'check result of remove');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPersonArray[0]^.Equals(personA),'check element 0');
AssertTrue(actualPtPersonArray[1]^.Equals(personB),'check element 1');
AssertTrue(actualPtPersonArray[2]^.Equals(personD),'check element 2');
TEST_FINISHED();

TEST('RemoveAtMinusIndexShouldFail');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
expectedCount := 4;
//Act
actual := personsList.RemoveAt(-1);
actualCount := personsList.GetCount();
FOR j:=0 TO 3 DO
    actualPtPersonArray[j] := personsList.GetItem(j);
END_FOR
//Assert
AssertFalse(actual,'check result of remove');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPersonArray[0]^.Equals(personA),'check element 0');
AssertTrue(actualPtPersonArray[1]^.Equals(personB),'check element 1');
AssertTrue(actualPtPersonArray[2]^.Equals(personC),'check element 2');
AssertTrue(actualPtPersonArray[3]^.Equals(personD),'check element 3');
TEST_FINISHED();

TEST('RemoveAtIndexGreaterThanLastIndexShouldFail');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
expectedCount := 4;
//Act
actualCount := personsList.GetCount();
actual := personsList.RemoveAt(actualCount);
actualCount := personsList.GetCount();
FOR j:=0 TO 3 DO
    actualPtPersonArray[j] := personsList.GetItem(j);
END_FOR
//Assert
AssertFalse(actual,'check result of remove');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPersonArray[0]^.Equals(personA),'check element 0');
AssertTrue(actualPtPersonArray[1]^.Equals(personB),'check element 1');
AssertTrue(actualPtPersonArray[2]^.Equals(personC),'check element 2');
AssertTrue(actualPtPersonArray[3]^.Equals(personD),'check element 3');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveRange" Id="{d6049325-00aa-4c78-a69d-b2138d02581d}">
      <Declaration><![CDATA[METHOD RemoveRange
VAR
    personsList : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    actualPtPersonArray : ARRAY[0..3] OF POINTER TO Person;
    expectedCount : INT := 7 - 3;
    actualCount : INT;
    actual : BOOL;
    j : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Before All
personA.SetAge(10);
personB.SetAge(11);
personC.SetAge(12);
personD.SetAge(13);
personE.SetAge(14);
personF.SetAge(15);
personG.SetAge(16);
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');

TEST('RemoveRangeShouldPass');
//Assign
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);
personsList.AddItem(personG);
//Act
actual := personsList.RemoveRange(2,3);
actualCount := personsList.GetCount();
FOR j:=0 TO 3 DO
    actualPtPersonArray[j] := personsList.GetItem(j);
END_FOR
//Assert
AssertTrue(actual,'check result of removeRange');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPersonArray[0]^.Equals(personA),'check element 0');
AssertTrue(actualPtPersonArray[1]^.Equals(personB),'check element 1');
AssertTrue(actualPtPersonArray[2]^.Equals(personF),'check element 2');
AssertTrue(actualPtPersonArray[3]^.Equals(personG),'check element 3');
TEST_FINISHED();

TEST('RemoveRangeWithRangeLongerThanCountShouldPass');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);
personsList.AddItem(personG);
expectedCount := 4;
//Act
actual := personsList.RemoveRange(4,10);
actualCount := personsList.GetCount();
FOR j:=0 TO 3 DO
    actualPtPersonArray[j] := personsList.GetItem(j);
END_FOR
//Assert
AssertTrue(actual,'check result of removeRange');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPersonArray[0]^.Equals(personA),'check element 0');
AssertTrue(actualPtPersonArray[1]^.Equals(personB),'check element 1');
AssertTrue(actualPtPersonArray[2]^.Equals(personC),'check element 2');
AssertTrue(actualPtPersonArray[3]^.Equals(personD),'check element 3');
TEST_FINISHED();

TEST('RemoveRangeWithMinusIndexShouldFail');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);
personsList.AddItem(personG);
expectedCount := 7;
//Act
actual := personsList.RemoveRange(-1,3);
actualCount := personsList.GetCount();
FOR j:=0 TO 3 DO
    actualPtPersonArray[j] := personsList.GetItem(j);
END_FOR
//Assert
AssertFalse(actual,'check result of removeRange');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPersonArray[0]^.Equals(personA),'check element 0');
AssertTrue(actualPtPersonArray[1]^.Equals(personB),'check element 1');
AssertTrue(actualPtPersonArray[2]^.Equals(personC),'check element 2');
AssertTrue(actualPtPersonArray[3]^.Equals(personD),'check element 3');
TEST_FINISHED();

TEST('RemoveRangeWithIndexGreaterThanLastIndexShouldFail');
//Assign
personsList.Clear();
personsList.AddItem(personA);
personsList.AddItem(personB);
personsList.AddItem(personC);
personsList.AddItem(personD);
personsList.AddItem(personE);
personsList.AddItem(personF);
personsList.AddItem(personG);
expectedCount := 7;
//Act
actualCount := personsList.GetCount();
actual := personsList.RemoveRange(actualCount,3);
actualCount := personsList.GetCount();
FOR j:=0 TO 3 DO
    actualPtPersonArray[j] := personsList.GetItem(j);
END_FOR
//Assert
AssertFalse(actual,'check result of removeRange');
AssertEquals(expectedCount, actualCount,'check list count');
AssertTrue(actualPtPersonArray[0]^.Equals(personA),'check element 0');
AssertTrue(actualPtPersonArray[1]^.Equals(personB),'check element 1');
AssertTrue(actualPtPersonArray[2]^.Equals(personC),'check element 2');
AssertTrue(actualPtPersonArray[3]^.Equals(personD),'check element 3');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>