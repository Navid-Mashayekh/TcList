<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="List_Person_Test" Id="{f9270774-45f6-4a3c-bd99-dc3e4865897e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK List_Person_Test EXTENDS TcUnit.FB_TestSuite
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AddAndGet();
AddAndGetShouldBeByReference();
GetCapacity();
GetCount();
Clear();
RemoveAt();
RemoveRange();
Contains();
Exists();
Find();]]></ST>
    </Implementation>
    <Method Name="AddAndGet" Id="{25c92982-6de9-488f-9bc0-45793e501629}">
      <Declaration><![CDATA[METHOD AddAndGet
VAR
    list_Person_ : List_Person_;
    expectedPerson : Person;
    expectedAge : INT := 10;
    expectedIndex : INT := 0;
    actualPtPerson : POINTER TO Person;
    actualAge : INT;
    actualIndex : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('AddAndGetPersonShouldPass');

//Assign
expectedPerson.SetAge(expectedAge);

//Act
actualIndex := list_Person_.AddItem(expectedPerson);
actualPtPerson := list_Person_.GetItem(actualIndex);
actualAge := actualPtPerson^.GetAge();

//Assert
AssertEquals(expectedIndex, actualIndex,'');
AssertEquals(expectedAge, actualAge,'');
AssertTrue(actualPtPerson^.Equals(expectedPerson),'');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddAndGetShouldBeByReference" Id="{d5902a8f-61b3-4da7-91e7-b3e1326fada2}">
      <Declaration><![CDATA[METHOD AddAndGetShouldBeByReference
VAR
    list_Person_ : List_Person_;
    expectedPerson : Person;
    expectedAge : INT := 10;
    actualPtPerson : POINTER TO Person;
    actualAge : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('AddAndGetShouldBeByReference');

//Assign

//Act
list_Person_.AddItem(expectedPerson);
actualPtPerson := list_Person_.GetItem(0);
expectedPerson.SetAge(expectedAge);
actualAge := actualPtPerson^.GetAge();

//Assert
AssertEquals(expectedAge, actualAge,'');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{9b3dfb6f-1f77-47b8-8a33-f0a2c6ffe4cf}">
      <Declaration><![CDATA[METHOD Clear
VAR
    list_Person_ : List_Person_;
    person : Person;
    expectedCount : INT := 1;
    actualCount : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ClearShouldPass');

//Assign
list_Person_.AddItem(person);

//Act
actualCount := list_Person_.GetCount();

//Assert
AssertEquals(expectedCount, actualCount,'Get count after adding a person');

//Act
list_Person_.Clear();
actualCount := list_Person_.GetCount();

//Assert
expectedCount := 0;
AssertEquals(expectedCount, actualCount,'Get count after clearing the list');


TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{bcc8c300-f0ae-4774-b872-f70bc7232e4b}">
      <Declaration><![CDATA[METHOD Contains
VAR
    list_Person_ : List_Person_;
    person0 : Person;
    person1 : Person;
    person2 : Person;
    person3 : Person;
    person4 : Person;
    person5 : Person;
    person6 : Person;
    actual : BOOL;
    expected : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ContainsShouldPass');

//Assign
person0.SetAge(10);
person1.SetAge(11);
person2.SetAge(12);
person3.SetAge(13);
person4.SetAge(14);
person5.SetAge(15);
person6.SetAge(16);
list_Person_.AddItem(person0);
list_Person_.AddItem(person1);
list_Person_.AddItem(person2);
list_Person_.AddItem(person3);
list_Person_.AddItem(person4);
list_Person_.AddItem(person5);

//Act
actual := list_Person_.Contains(person2);

//Assert
AssertEquals(expected, actual,'Looking for person2');

//Act
actual := list_Person_.Contains(person6);

//Assert
expected := FALSE;
AssertEquals(expected, actual,'Looking for person6');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Exists" Id="{2d5869da-5a98-40d2-baa2-7f0ec5c9ca2b}">
      <Declaration><![CDATA[METHOD Exists
VAR
    list_Person_ : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    predicate_Person_ : Predicate_Person_;
    actual : BOOL;
    expected : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ExistsShouldPass');

//Assign
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
list_Person_.AddItem(personA);
list_Person_.AddItem(personB);
list_Person_.AddItem(personC);
list_Person_.AddItem(personD);
list_Person_.AddItem(personE);
list_Person_.AddItem(personF);

//Act
actual := list_Person_.Exists(predicate_Person_, 2);

//Assert
AssertEquals(expected, actual,'Looking for a person with name C');

//Act
actual := list_Person_.Exists(predicate_Person_, 3);

//Assert
expected := FALSE;
AssertEquals(expected, actual,'Looking for a person with name G');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{88eff670-7867-4249-acd8-bd79171fc10a}">
      <Declaration><![CDATA[METHOD Find
VAR
    list_Person_ : List_Person_;
    personA : Person;
    personB : Person;
    personC : Person;
    personD : Person;
    personE : Person;
    personF : Person;
    personG : Person;
    predicate_Person_ : Predicate_Person_;
    actualPtPerson : POINTER TO Person;
    nullPtPerson : POINTER TO person := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('FindShouldPass');

//Assign
personA.SetName('A');
personB.SetName('B');
personC.SetName('C');
personD.SetName('D');
personE.SetName('E');
personF.SetName('F');
personG.SetName('G');
list_Person_.AddItem(personA);
list_Person_.AddItem(personB);
list_Person_.AddItem(personC);
list_Person_.AddItem(personD);
list_Person_.AddItem(personE);
list_Person_.AddItem(personF);

//Act
actualPtPerson := list_Person_.Find(predicate_Person_, 2);

//Assert
AssertTrue(actualPtPerson^.Equals(personC),'Get person with name C');

//Act
actualPtPerson := list_Person_.Find(predicate_Person_, 3);

//Assert
AssertEquals(nullPtPerson, actualPtPerson,'Get Zero when looking for person with name G');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCapacity" Id="{8ddaab13-7598-4afc-a5e5-0cd2f6d7be65}">
      <Declaration><![CDATA[METHOD GetCapacity
VAR
    list_Person_ : List_Person_;
    person : Person;
    expectedCapacity : INT := GVL.LIST_UPPER_BOUND + 1;
    actualCapacity : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('GetCapacityShouldPass');

//Act
actualCapacity := list_Person_.GetCapacity();

//Assert1
AssertEquals_INT(expectedCapacity, actualCapacity,'Get capacity at the begining');


//Assign
list_Person_.AddItem(person);

//Act
actualCapacity := list_Person_.GetCapacity();

//Assert2
AssertEquals(expectedCapacity, actualCapacity,'Get capacity after adding a person');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCount" Id="{e9e9e69d-bbf9-467d-a81f-09763039079f}">
      <Declaration><![CDATA[METHOD GetCount
VAR
    list_Person_ : List_Person_;
    person : Person;
    expectedCount : INT := 0;
    actualCount : INT;
    actualPtPerson : POINTER TO Person;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('GetCountShouldPass');

//Act
actualCount := list_Person_.GetCount();

//Assert
AssertEquals_INT(expectedCount, actualCount,'Get count at the begining');


//Assign
list_Person_.AddItem(person);

//Act
actualCount := list_Person_.GetCount();

//Assert
expectedCount := 1;
AssertEquals(expectedCount, actualCount,'Get count after adding a person');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{1d891a18-a23d-45c2-8d94-b094a5a2c29f}">
      <Declaration><![CDATA[METHOD RemoveAt
VAR
    list_Person_ : List_Person_;
    person : Person;
    expectedPtPerson : POINTER TO Person := 0;
    expectedCount : INT := 0;
    actualPtPerson : POINTER TO Person;
    actualCount : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('RemoveAtShouldPass');

//Assign
list_Person_.AddItem(person);

//Act
list_Person_.RemoveAt(0);
actualCount := list_Person_.GetCount();
actualPtPerson := list_Person_.GetItem(0);

//Assert
AssertEquals(expectedCount, actualCount,'');
AssertEquals(expectedPtPerson, actualPtPerson,'');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveRange" Id="{d6049325-00aa-4c78-a69d-b2138d02581d}">
      <Declaration><![CDATA[METHOD RemoveRange
VAR
    list_Person_ : List_Person_;
    person0 : Person;
    person1 : Person;
    person2 : Person;
    person3 : Person;
    person4 : Person;
    person5 : Person;
    person6 : Person;
    expectedPtPerson : POINTER TO Person := 0;
    expectedCount : INT := 7 - 3;
    actualPtPerson1 : POINTER TO Person;
    actualPtPerson2 : POINTER TO Person;
    actualCount : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('RemoveRangeShouldPass');

//Assign
person0.SetAge(10);
person1.SetAge(11);
person2.SetAge(12);
person3.SetAge(13);
person4.SetAge(14);
person5.SetAge(15);
person6.SetAge(16);
list_Person_.AddItem(person0);
list_Person_.AddItem(person1);
list_Person_.AddItem(person2);
list_Person_.AddItem(person3);
list_Person_.AddItem(person4);
list_Person_.AddItem(person5);
list_Person_.AddItem(person6);

//Act
list_Person_.RemoveRange(2,3);
actualCount := list_Person_.GetCount();
actualPtPerson1 := list_Person_.GetItem(1);
actualPtPerson2 := list_Person_.GetItem(2);

//Assert
AssertEquals(expectedCount, actualCount,'');
AssertEquals_INT(person1.GetAge(), actualPtPerson1^.GetAge(),'');
AssertEquals_INT(person5.GetAge(), actualPtPerson2^.GetAge(),'');


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>